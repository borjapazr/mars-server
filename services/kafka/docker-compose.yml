version: "3.7"

services:
  ### Zookeeper: A centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services. ###
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - TZ=${TZ}
    ports:
      - 2181:2181
  ### Apache Kafka: An open-source distributed event streaming platform used by thousands of companies for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications. ###
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=INTERNAL://:19092,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:19092,EXTERNAL://kafka.${DOMAIN}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES=100001200
      - KAFKA_CFG_MESSAGE_MAX_BYTES=100001200
      - KAFKA_CFG_MAX_REQUEST_SIZE=100001200
      - TZ=${TZ}
    volumes:
      - "./config/kafka_jaas.conf:/opt/bitnami/kafka/conf/kafka_jaas.conf:ro"
    ports:
      - 9092:9092
  ### Kafdrop: A web UI for viewing Kafka topics and browsing consumer groups. The tool displays information such as brokers, topics, partitions, consumers, and lets you view messages. ###
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    hostname: kafdrop
    restart: always
    depends_on:
      - kafka
    environment:
      - KAFKA_BROKERCONNECT=INTERNAL://kafka:19092
      - JVM_OPTS=-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify
      - TZ=${TZ}
    networks:
      - default
      - traefik-network
    labels:
      ## Traefik configuration ##
      # Enable Traefik #
      - traefik.enable=true
      - traefik.docker.network=traefik-network

      # Set entrypoint port #
      - traefik.http.services.kafdrop.loadbalancer.server.port=9000

      # Set HTTP domain and HTTP -> HTTPS redirection #
      - traefik.http.routers.kafdrop.rule=Host(`kafdrop.${DOMAIN}`)
      - traefik.http.routers.kafdrop.entrypoints=web
      - traefik.http.routers.kafdrop.middlewares=https-redirect@file

      # Set HTTPS domain #
      - traefik.http.routers.kafdrop-secure.rule=Host(`kafdrop.${DOMAIN}`)
      - traefik.http.routers.kafdrop-secure.entrypoints=websecure
      - traefik.http.routers.kafdrop-secure.middlewares=basic-auth@file
  ### Kafka UI: UI for Apache Kafka is a free, open-source web UI to monitor and manage Apache Kafka clusters. ###
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    hostname: kafka-ui
    restart: always
    depends_on:
      - kafka
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:19092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - TZ=${TZ}
    networks:
      - default
      - traefik-network
    labels:
      ## Traefik configuration ##
      # Enable Traefik #
      - traefik.enable=true
      - traefik.docker.network=traefik-network

      # Set entrypoint port #
      - traefik.http.services.kafka-ui.loadbalancer.server.port=8080

      # Set HTTP domain and HTTP -> HTTPS redirection #
      - traefik.http.routers.kafka-ui.rule=Host(`kafka-ui.${DOMAIN}`)
      - traefik.http.routers.kafka-ui.entrypoints=web
      - traefik.http.routers.kafka-ui.middlewares=https-redirect@file

      # Set HTTPS domain #
      - traefik.http.routers.kafka-ui-secure.rule=Host(`kafka-ui.${DOMAIN}`)
      - traefik.http.routers.kafka-ui-secure.entrypoints=websecure
      - traefik.http.routers.kafka-ui-secure.middlewares=basic-auth@file
  ### AKHQ: Kafka GUI for Apache Kafka to manage topics, topics data, consumers group, schema registry, connect and more... ###
  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    hostname: akhq
    restart: always
    depends_on:
      - kafka
    environment:
      - TZ=${TZ}
    volumes:
      - ./config/application.yml:/app/application.yml
    networks:
      - default
      - traefik-network
    labels:
      ## Traefik configuration ##
      # Enable Traefik #
      - traefik.enable=true
      - traefik.docker.network=traefik-network

      # Set entrypoint port #
      - traefik.http.services.akhq.loadbalancer.server.port=8080

      # Set HTTP domain and HTTP -> HTTPS redirection #
      - traefik.http.routers.akhq.rule=Host(`akhq.${DOMAIN}`)
      - traefik.http.routers.akhq.entrypoints=web
      - traefik.http.routers.akhq.middlewares=https-redirect@file

      # Set HTTPS domain #
      - traefik.http.routers.akhq-secure.rule=Host(`akhq.${DOMAIN}`)
      - traefik.http.routers.akhq-secure.entrypoints=websecure
      - traefik.http.routers.akhq-secure.middlewares=basic-auth@file

networks:
  default:
    name: kafka-network
  traefik-network:
    name: traefik-network
    external: true
